# -*- coding: utf-8 -*-
"""BestPlace_LineBot1221v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PkMxKJgoHk720RBx3ULBFqKMISmxnD0F

[to do list]
# *   ***不知道為什麼跑不出top_five [餐廳,文教,醫療時]***
*   flex message:
1.    loca會有重複的問題
2.    +知名建案的比較
[FN-1]
1. 開啟gmap,如果使用者有預設開gmap,就會無法打開(app不支援place_id語法)
2. 電腦版無法顯示flex message的照片
3. 評論好感度普遍偏差
[FN-2]
1. liff route搬運
>>> 圖文選單調整
>>> 本地端測試後>>>串Storage,進行部署
>>> 報告PPT整理
-----------
調整:
1. postback塞到event裡面
"""

# from google.colab import drive
# drive.mount('/content/drive')

# !pip install line-bot-sdk flask flask-ngrok

# from flask_ngrok import run_with_ngrok
from flask import Flask, request, abort, jsonify,render_template, redirect, url_for
import json
from linebot import (LineBotApi, WebhookHandler)
from linebot.exceptions import (InvalidSignatureError)
from linebot.models import *
from linebot.models.template import *
import requests
from linebot.models.events import (FollowEvent)

app = Flask(__name__,static_url_path = "/material" , static_folder = "./material/")
# run_with_ngrok(app)

line_bot_api = LineBotApi("NQ8Ihq/Nb5Y3dVWADapsDO5xpzKzdysrFJfNz6IfPvWR+cFd7mCUgTFfF/+VAh+zYcqfxV10uSGcA7dJOY08x+p3uOS0rWv/ev73UNm875LHMvzIkNzJ+QR1Wgr4C5JfJLxAapjetCxjRXHn7y9etAdB04t89/1O/w1cDnyilFU=")
handler = WebhookHandler("5edee00bac4ba1c19fd392928337f8e1")

# @app.route('/input')#Liff處理的網站路徑
# #定義如何處理
# def input():
#     return render_template('user_input.html')
@app.route('/input')#處理的網站路徑
#定義如何處理
def input():
    return render_template('user_input.html') 


@app.route("/", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    print("---收到的用戶log："+body)
    
    # 記錄用戶log
    f = open("ai-event.log", "a")
    f.write(body)
    f.close()

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

from linebot.models.events import (FollowEvent)
from linebot.models import(TextSendMessage, ImageSendMessage)
import requests

# 告知handler，如果收到FollowEvent，則做下面的方法處理
@handler.add(FollowEvent)
def reply_text_and_get_user_profile(event):
    
    # 取出消息內User的資料
    user_profile = line_bot_api.get_profile(event.source.user_id)
        
     # 將用戶資訊存在檔案內
    with open("users.txt", "a") as myfile:
        myfile.write(json.dumps(vars(user_profile),sort_keys=True))
        myfile.write('\n')

from linebot.models import (LocationAction, QuickReply, QuickReplyButton, TextSendMessage)

# 創建QuickReplyButton 
## 點擊後，跳出地理位置
locationQRB = QuickReplyButton(
    action=LocationAction(label="地理位置")
)
## 設計QuickReplyButton的List
quickReplyList = QuickReply(
    items = [locationQRB]
)
## 將quickReplyList 塞入TextSendMessage 中 
quick_reply_text_send_message = TextSendMessage(text='請提供您的位置資訊:', quick_reply=quickReplyList)

from linebot.models import (MessageEvent, TextMessage, TextSendMessage, ImageSendMessage, LocationMessage)

template_message_dict = {
  "@居地評分":quick_reply_text_send_message,
}

# 用戶發出文字消息時， 按條件內容, 回傳文字消息
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    EasterEgg = 0
    if '@' in event.message.text:
      line_bot_api.reply_message(
      event.reply_token,
      template_message_dict.get(event.message.text)
      )
    elif '#展開所有' in event.message.text:
      print('--------使用者選擇展開所有的功能：'+event.message.text)
      buttons_template_message = json.load(open('button_flex1220.json','r',encoding='utf-8'))
      line_bot_api.reply_message(
      event.reply_token,
      FlexSendMessage('button_flex',buttons_template_message)
      )
    elif '你選了：' in event.message.text:
      print('--------使用者liff選擇：'+event.message.text)
      if '上班族' in event.message.text:
          line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="https://teamweb.bplace.xyz/?s=%E4%B8%8A%E7%8F%AD%E6%97%8F")
        )
      elif '小家庭' in event.message.text:
          line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="https://teamweb.bplace.xyz/?s=%E5%B0%8F%E5%AE%B6%E5%BA%AD")
        )
      elif '銀髮族' in event.message.text:
          line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="https://teamweb.bplace.xyz/?s=%E9%8A%80%E9%AB%AE%E6%97%8F")
        )
    elif '我就愛點圖' in event.message.text:
        if EasterEgg <= 5:
          EasterEgg += 1
        line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=f"你真的很喜歡亂點...恭喜你找到第{EasterEgg}/5個彩蛋...by Sam")
        )

import pandas as pd
import numpy as np

def Distance(B,user_lati,user_longi):
  # B -> [25.123, 121.123]
  
  [a, b] = user_lati,user_longi
  [c, d] = eval(B)
  
  import math

  R = 6373.0  # radius of the Earth

  # coordinates
  lat1 = math.radians(a)
  lon1 = math.radians(b)
  lat2 = math.radians(c)
  lon2 = math.radians(d)

  # change in coordinates
  dlon = lon2 - lon1
  dlat = lat2 - lat1

  # Haversine formula
  a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
  c = 2 * math.asin(math.sqrt(a))
  distance = R * c

  return distance

def surroundings(User):
  U = User[User['distance'] <= 0.5]
 # surrounding category sum up
  Count = U['category'].value_counts().to_dict()
  A = Count.get('餐廳', 0)
  B = Count.get('交通', 0)
  C = Count.get('綠地與景點', 0)
  D = Count.get('生活購物', 0)
  E = Count.get('文教', 0)
  F = Count.get('醫療', 0)
  G = Count.get('運動', 0)

  Total = [A,B,C,D,E,F,G]
  return Total

def get_top_five(input_type, U):
    # User data從distance取得
    # 取得排序後的距離資料
    Sorted = U[(U['category'] == input_type)].copy()
    cols = [
        'rating',
        'user_ratings_total',
        'senti_score'
    ]
    Sorted[cols] = Sorted[cols].replace({'-': 1, np.nan: 1, 0: 1 , '0':1})
    # print(pd.DataFrame(Sorted))    
    Sorted[cols] = Sorted[cols].astype(float)
    Sorted['Score'] = (Sorted.user_ratings_total ** (1/6)) * Sorted.rating * Sorted.senti_score / (Sorted.distance ** 3)
    Sorted = Sorted.drop(columns=['Score'])
    # 回傳用戶選擇type的前五筆
    return Sorted.head(5).to_dict('records')

def get_photo(list_of_dicts):  # input: get_top_five('餐廳', User)
    # 取得店家照片url
    import requests
    if len(list_of_dicts) > 0:
        photos = []
        for i in pd.DataFrame(list_of_dicts).place_id:
            response = requests.get(f'https://maps.googleapis.com/maps/api/place/details/json?placeid={i}&fields=photo&key=AIzaSyCyhAtYmxtcM4p-cOFXC4EgmVzC7OL__04').json()
            if 'photos' in response['result']:
                photo_preference = response['result']['photos'][0]['photo_reference']
                # print(photo_preference)
                photo_href = f'https://maps.googleapis.com/maps/api/place/photo?maxheight=200&maxwidth=400&photoreference={photo_preference}&sensor=false&key=AIzaSyCyhAtYmxtcM4p-cOFXC4EgmVzC7OL__04'
                photos.append(photo_href)
            else:
                photos.append("https://lh5.googleusercontent.com/p/AF1QipMG5KmX0aokrQEbkfN-mxGw3Cr56-8EsKPrXD7I=w408-h272-k-no")
    return photos  # top5店家照片的list

def score_flex_maker(place_score,user_add,output_num):
    with open('score1224v6.json',encoding='utf8') as f:

      o = output_num
      # print(f"收到的surrounding長度:{len(o)}")
      fun_count = []
      for i in range(len(o)):
          fun_count.append(str(o[i]))
      # print(fun_count)

      jsonArray = json.load(f)
      j = jsonArray["body"]["contents"]
      j[0]["contents"][1]["text"] = f"{place_score}"
      j[1]["contents"][0]["contents"][1]["text"] = user_add
      for i in range(len(o)):
          j[1]["contents"][3]["contents"][i]["text"] = fun_count[i]

      return jsonArray

from numpy.lib.function_base import place
from linebot.models import (PostbackEvent)
import copy

df = pd.read_csv('data_no_NaN.csv')
# print(f"讀取原始的csv檔{df}")
@handler.add(MessageEvent, message=LocationMessage)
def handle_message(event):
  message_type = event.message.type
  user_id = event.source.user_id
  reply_token = event.reply_token
  
  global loca
  loca = event.message
  print("-----收到的用戶event.message：" + str(loca))
  #抓出要的用戶參數
  user_lati = loca.latitude
  user_longi = loca.longitude
  user_add = loca.address
  user_id = loca.id

  df['distance'] = df['location'].apply(lambda x : Distance(x,user_lati,user_longi))
  global User
  User = df.sort_values(by=['distance']).reset_index(drop=True).copy()
  output_num = surroundings(User)
  print(f"-----算出的surroundings：{output_num}" )

  #設定flex參數:
  def place_score(list_from_sur):  # 從surrounding拿到周遭數量的list
    # 給出所在地範圍評分：這裡設定滿分10分
    import math
    tt = sum(list_from_sur)
    a = min(math.log(tt), 5) + (5 - list_from_sur.count(0) * 5 / 7)
    return round(a, 2)

  Place_score = max(place_score(output_num)/2 , 1)
  Place_score = round(Place_score , 1)
  print(f"-----居地評分:{Place_score}")
  js_result = score_flex_maker(str(Place_score) , user_add , output_num )
  print("-------要回傳給用戶的flexmessage：" + str(js_result))
  with open('score_result.json','w',encoding='utf8') as w:
    w.write(json.dumps(js_result))
  FlexMessage = json.load(open('score_result.json','r',encoding='utf-8'))
  line_bot_api.reply_message(
        event.reply_token,
        FlexSendMessage('feedback_result',FlexMessage) 
    )

def place_flex_maker(output_place,place_photo):
    with open('reply_template_place1223v7test.json',encoding='utf8') as f:
      o = output_place
      pp = place_photo
      # print(f"Photo_url>>>>>>{pp}")
      # print(f"算出的top_five長度{len(o)}")
      jsonArray = json.load(f)
      for i in range(len(o)): 
        #資料取值與處理
        place_name = o[i]["name"]
        rating = o[i]["rating"]
        senti_score = o[i]["senti_score"]
        if senti_score == 1.0:
          senti_score = "極差" #紅色 ##FF0000
          color = "#B22222"
        elif senti_score == 2.0:
          senti_score = "不良" #橙色
          color = "#FF4500"
        elif senti_score == 3.0:
          senti_score = "普通" #重一點的灰色
          color = "#696969"
        elif senti_score == 4.0:
          senti_score = "良好" #亮綠
          color = "#00FF00"
        elif senti_score == 5.0:
          senti_score = "極佳" #深綠
          color = "#008000"  

        if o[i]["label"] == "-":
          place_tag = '資料不足,尚無標籤' 
        else:
          place_tag = o[i]["label"]        
        # place_tag = eval(o["label"])
        a = o[i]["City"] + o[i]["vicinity"]
        address = f"{a}"
        tel = str(o[i]["tel"]).replace(" ", "")
        if tel == "-": 
          call = f"tel://1995"
        else:
          call = f"tel://{tel}"
        p = o[i]["place_id"]
        if p == "-":
          gmap = f"https://www.google.com/maps/place"
        else:
          gmap = f"https://www.google.com/maps/place/?q=place_id:{p}"

        j = jsonArray[0]["contents"]["contents"]
        j[i]["body"]["contents"][0]["text"] = place_name
        j[i]["body"]["contents"][1]["contents"][1]["text"] = str(rating)
        j[i]["body"]["contents"][2]["contents"][1]["text"] = senti_score
        j[i]["body"]["contents"][2]["contents"][1]["color"] = color
        j[i]["body"]["contents"][3]["contents"][1]["text"] = place_tag
        j[i]["body"]["contents"][4]["contents"][1]["text"] = address
        j[i]["body"]["contents"][5]["contents"][1]["text"] = tel
        j[i]["footer"]["contents"][0]["action"]["uri"] = call
        j[i]["footer"]["contents"][1]["action"]["uri"] = gmap
        j[i]["hero"]["url"] = pp[i]

    return jsonArray

def result_template_transfer():
  with open("place_result.json", encoding='utf8') as f: 
    templateArray = json.load(f)
  result_message_array = []  
  for jsonObject in templateArray:
    message_type = jsonObject.get('type') 
    if message_type == 'text': 
      result_message_array.append(TextSendMessage.new_from_json_dict(jsonObject)) 
    elif message_type == 'template': 
      result_message_array.append(TemplateSendMessage.new_from_json_dict(jsonObject)) 
    elif message_type == 'flex': 
      result_message_array.append(FlexSendMessage.new_from_json_dict(jsonObject))
  return result_message_array

from linebot.models import (PostbackEvent)
import copy
@handler.add(PostbackEvent)
def process_postback_event(event):
  user_profile = line_bot_api.get_profile(event.source.user_id)

  if (event.postback.data.find('#food')== 0):
          output_place = get_top_five('餐廳',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('餐廳', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#traffic') == 0):
          output_place = get_top_five('交通',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('交通', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )  
  elif (event.postback.data.find('#park') == 0):
          output_place = get_top_five('綠地與景點',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('綠地與景點', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#shop') == 0):
          output_place = get_top_five('生活購物',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('生活購物', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#edu') == 0):
          output_place = get_top_five('文教',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('文教', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#hos') == 0):
          output_place = get_top_five('醫療',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('醫療', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#sport') == 0):
          output_place = get_top_five('運動',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          place_photo = get_photo(get_top_five('運動', User))
          # print(f"photo_url>>>>>{place_photo}")
          place_result = place_flex_maker(output_place,place_photo)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # print(f"**監看使用者的loca:{loca}")
          print(f"********來看看USER有沒有變化:{User}")
          with open('place_result.json','w',encoding='utf8') as w:
              w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          result_template_transfer()
          )
  elif (event.postback.data.find('#other') == 0):
          # output_place = get_top_five('其他',User)
          # print(f"-----算出的get_top_five：{output_place}") 
          # place_result = place_flex_maker(output_place)
          # print(f"-----要回傳給使用者的place_message:{place_result}")
          # with open('place_result.json','w',encoding='utf8') as w:
          #     w.write(json.dumps(place_result))
          line_bot_api.reply_message(
          event.reply_token,
          TextMessage(text='此功能尚在開發中,敬請期待...')
          )
  else:
      pass
if __name__ == "__main__":
  app.run()